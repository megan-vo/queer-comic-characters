### cell rather than the whole row!)
# What was the 2015 salary of employee 57
salaries[57, ]
# How many employees got a raise?
nrows(salaries[['got.raise' = T]])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
salary.start <- c(runif(100, 40000, 50000))
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
salary.change <- c(salary.start + runif(100, -10000, 10000))
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary.start, salary.change, stringsAsFactors=FALSE)
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
salaries$raise <- salary.start - salary.change
# Create a column 'got.raise' that is TRUE if the person got a raise
salaries$got.raise <- salaries$raise > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
salaries[57, ]
# How many employees got a raise?
nrows(salaries[['got.raise' == T]])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
salary.start <- c(runif(100, 40000, 50000))
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
salary.change <- c(salary.start + runif(100, -10000, 10000))
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary.start, salary.change, stringsAsFactors=FALSE)
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
salaries$raise <- salary.start - salary.change
# Create a column 'got.raise' that is TRUE if the person got a raise
salaries$got.raise <- salaries$raise > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
salaries[57, ]
# How many employees got a raise?
nrows(salaries[salaries$got.raise == T])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
salary.start <- c(runif(100, 40000, 50000))
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
salary.change <- c(salary.start + runif(100, -10000, 10000))
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary.start, salary.change, stringsAsFactors=FALSE)
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
salaries$raise <- salary.start - salary.change
# Create a column 'got.raise' that is TRUE if the person got a raise
salaries$got.raise <- salaries$raise > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
salaries[57, ]
# How many employees got a raise?
nrow(salaries[salaries$got.raise == T])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
salary.start <- c(runif(100, 40000, 50000))
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
salary.change <- c(salary.start + runif(100, -10000, 10000))
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary.start, salary.change, stringsAsFactors=FALSE)
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
salaries$raise <- salary.start - salary.change
# Create a column 'got.raise' that is TRUE if the person got a raise
salaries$got.raise <- salaries$raise > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
salaries[57, ]
# How many employees got a raise?
nrow(salaries[salaries$got.raise == TRUE,])
# packages only need to be installed once per dev machine
#install.packages("jsonlite")
#install.packages("httr")
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- http://pokeapi.co/api/v2/
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
pokemon <- "swampert"
# Make a variable called pokemon url that holds your favorite pokemon's url
pokemon.url <- paste0(base.url, "pokemon/", pokemon, "/")
# Use the GET function to call the url, store it in a variable called response
poke.response <- GET(pokemon.url)
# Make a variable called pokemon url that holds your favorite pokemon's url
pokemon.url <- paste0(base.url, "pokemon/", pokemon, "/")
# Use the GET function to call the url, store it in a variable called response
poke.response <- GET(pokemon.url)
# Use the names function to learn more response. Print it out. It will return a list of ten
# names within the response object. You can think of the list names as column names.
print(names(response))
pokemon.url <- paste0(base.url, "pokemon/", pokemon, "/")
# Use the GET function to call the url, store it in a variable called response
poke.response <- GET(pokemon.url)
# Use the names function to learn more response. Print it out. It will return a list of ten
# names within the response object. You can think of the list names as column names.
print(names(poke.response))
print(poke.response$status_code)
body <- content(poke.response, "text")
# what function did we use to extract the data from response?
body <- content(poke.response, "text")
# create a variable poke.data that will convert the JSON string into a list
poke.data <- fromJSON(body)
# create a variable poke.data that will convert the JSON string into a list
poke.data <- fromJSON(body)
# Print out the keys from the poke.data by using the names function
print(names(poke.data))
print(is.data.frame(poke.data))
print(is.data.frame(poke.data$moves))
print(is.data.frame(poke.data$moves))
# Food for thought
# What do you think is the diffrence between the two outputs above? Why are they diffrent?
# Create a data frame named poke.moves with the moves. be sure to use the head function to only get the
# first few values. Feel free to use view to look at the dataframe.
poke.moves <- head(poke.data$moves)
poke.moves <- flatten(poke.moves)
print(colnames(poke.moves))
# Using dplyr remove all columns except the one with your move names.
poke.moves <- select(poke.moves, move.name)
print(poke.moves)
# indicates on a scale of 1-5 how much you like that move, with 1 being not at all and 5 being it's my favorite.
poke.moves <- mutate(poke.moves,
move.type = c("fight", "ice", "fight", "normal", "normal", "normal"),
scale = c(4, 5, 4, 3, 1, 2))
poke.moves <- arrange(scale)
# Using dplyr add one coloumn that indicates the type of the move (feel free to guess!) and one column that
# indicates on a scale of 1-5 how much you like that move, with 1 being not at all and 5 being it's my favorite.
poke.moves <- mutate(poke.moves,
move.type = c("fight", "ice", "fight", "normal", "normal", "normal"),
scale = c(4, 5, 4, 3, 1, 2))
# Using dplyr order the moves by rank. Higher ranking moves should be on the top of the dataframe.
poke.moves <- arrange(poke.moves, scale)
View(poke.moves)
poke.moves <- arrange(poke.moves, -scale)
shiny::runApp('Documents/info201/a8-data-app-megan-vo')
?aes()
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
test <- select(iris, starts_with("Sepal"))
test <- select(iris, starts_with("Sepal"))
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
library(tidyr)
data <- iris %>%
gather(key = measurement,
value = length,
Sepal.Length,
Petal.Length)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data <- left_join(data, data.width, by = "measurement")
View(data)
View(data.width)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
View(data.width)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width) %>%
select(measurement, width)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width) %>%
select(measurement, width)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data.width <- select(data.width, measurement, width)
View(data.width)
data <- iris %>%
gather(key = measurement,
value = length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data.width <- select(data.width, measurement, width)
data <- left_join(data, data.width, by = "measurement")
View(data)
data <- iris %>%
gather(key = measurement,
value = length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
View(data)
data <- iris %>%
gather(key = measurement,
value = length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data.width <- select(data.width, measurement, width)
data <- right_join(data, data.width, by = "measurement")
View(data)
data <- iris %>%
gather(key = measurement,
value = length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data.width <- select(data.width, measurement, width)
data <- left_join(data, data.width, by = "measurement") %>%
mutate(data.width$width)
View(data)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data <- iris %>%
gather(key = measurement,
value = length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data <- mutate(data.width$width)
View(data)
data <- iris %>%
gather(key = measurement,
value = length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data <- mutate(data, data.width$width)
View(data)
runApp('Documents/info201/a8-data-app-megan-vo')
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
# Gather data into columns of measurement type and their width
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
# Add width to final data table
data <- mutate(data, data.width$width)
# Change column name of widths to 'Width'
colnames(data)[3] = "Width"
View(data)
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, length)
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal.Length,
Petal.Length)
data <- select(data, measurement, Length)
# Gather data into columns of measurement type and their width
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
# Add width to final data table
data <- mutate(data, data.width$width)
# Change column name of widths to 'Width'
colnames(data)[3] = "Width"
runApp('Documents/info201/a8-data-app-megan-vo')
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
colnames(iris)[1] <- "Sepal"
colnames(iris)[3] <- "Petal"
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal,
Petal)
data <- select(data, measurement, Length)
# Gather data into columns of measurement type and their width
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
# Add width to final data table
data <- mutate(data, data.width$width)
# Change column name of widths to 'Width'
colnames(data)[3] = "Width"
?checkboxGroupInput()
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
colnames(iris)[1] <- "Sepal"
colnames(iris)[3] <- "Petal"
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal,
Petal)
data <- select(data, measurement, Length)
# Gather data into columns of measurement type and their width
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
# Add width to final data table
data <- mutate(data, data.width$width) %>%
filter(measurement == c("Sepal", "Petal"))
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
colnames(iris)[1] <- "Sepal"
colnames(iris)[3] <- "Petal"
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal,
Petal)
data <- select(data, measurement, Length)
# Gather data into columns of measurement type and their width
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
# Add width to final data table
data <- mutate(data, data.width$width) %>%
filter(measurement == c("Sepal"))
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
colnames(iris)[1] <- "Sepal"
colnames(iris)[3] <- "Petal"
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal,
Petal)
data <- select(data, measurement, Length)
# Gather data into columns of measurement type and their width
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
# Add width to final data table
data <- mutate(data, data.width$width) %>%
filter(measurement == c("Sepal"))
# Add width to final data table
data <- mutate(data, data.width$width) %>%
filter(measurement == c("Sepal", "Petal"))
# Gather data into columns of type of measurement (Sepal vs Petal) and their lengths
colnames(iris)[1] <- "Sepal"
colnames(iris)[3] <- "Petal"
data <- iris %>%
gather(key = measurement,
value = Length,
Sepal,
Petal)
data <- select(data, measurement, Length)
# Gather data into columns of measurement type and their width
data.width <- iris %>%
gather(key = measurement,
value = width,
Sepal.Width,
Petal.Width)
data <- mutate(data, data.width$width) %>%
filter(measurement == c("Sepal", "Petal"))
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
runApp('Documents/info201/a8-data-app-megan-vo')
shiny::runApp('Documents/info201/final-project')
shiny::runApp('Documents/info201/final-project')
runApp('Documents/info201/final-project')
runApp('Documents/info201/final-project')
runApp('Documents/info201/final-project')
runApp('Documents/info201/final-project')
runApp('Documents/info201/final-project')
shiny::runApp('Documents/info201/final-project')
shiny::runApp('Documents/info201/final-project')
shiny::runApp('Documents/info201/final-project')
setwd("~/Documents/Projects/queer-comic-characters")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# Add libraries and data sets
library(ggplot2)
library(shiny)
library(RColorBrewer)
library(shinythemes)
library(plotly)
library(dplyr)
###############
# Data Frames #
###############
# Read in Marvel and DC data sets
whole.marvel <- read.csv("data/marvel-wikia-data.csv", stringsAsFactors = FALSE)
whole.dc <- read.csv("data/dc-wikia-data.csv", stringsAsFactors = FALSE)
# Rename Marvel's "Year" to all caps
colnames(whole.marvel)[13] <- "YEAR"
# Filter for only the GSM characters and add company name
gsm.marvel <- filter(whole.marvel, GSM != "") %>% mutate(COMPANY = "MARVEL")
gsm.dc <- filter(whole.dc, GSM != "") %>%  mutate(COMPANY = "DC")
data <- bind_rows(gsm.marvel, gsm.dc) %>% filter(YEAR != "")
# Change the column "SEX" to "GENDER"
colnames(data)[which(names(data) == "SEX")] <- "GENDER"
View(data)
runApp()
?hoverOpts()
runApp()
runApp()
?grep()
runApp()
?replace()
runApp()
runApp()
runApp()
runApp()
?ggsave()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
